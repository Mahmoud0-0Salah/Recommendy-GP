// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Recommendy.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250623222718_add_courses")]
    partial class add_courses
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Admin", b =>
                {
                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("Entities.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Entities.Models.ChatUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FirstUserId");

                    b.ToTable("ChatUsers");
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("VerificationNotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Entities.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseLink = "https://udemy.com/python-for-beginners",
                            Description = "Learn Python from scratch. Perfect for beginners.",
                            DifficultyLevel = "Beginner",
                            Duration = 20,
                            Name = "Python for Beginners",
                            Platform = "Udemy",
                            Skills = "python, programming, basics"
                        },
                        new
                        {
                            Id = 2,
                            CourseLink = "https://coursera.org/advanced-javascript",
                            Description = "Deep dive into advanced JavaScript concepts and ES6+ features.",
                            DifficultyLevel = "Advanced",
                            Duration = 25,
                            Name = "Advanced JavaScript",
                            Platform = "Coursera",
                            Skills = "javascript, es6, web development"
                        },
                        new
                        {
                            Id = 3,
                            CourseLink = "https://edx.org/data-science-python",
                            Description = "Analyze data and build machine learning models using Python.",
                            DifficultyLevel = "Intermediate",
                            Duration = 30,
                            Name = "Data Science with Python",
                            Platform = "edX",
                            Skills = "python, data science, machine learning"
                        },
                        new
                        {
                            Id = 4,
                            CourseLink = "https://udemy.com/web-development-bootcamp",
                            Description = "Become a full stack web developer with HTML, CSS, JS, and Node.js.",
                            DifficultyLevel = "Beginner",
                            Duration = 40,
                            Name = "Web Development Bootcamp",
                            Platform = "Udemy",
                            Skills = "html, css, javascript, node.js, web development"
                        },
                        new
                        {
                            Id = 5,
                            CourseLink = "https://udemy.com/machine-learning-a-z",
                            Description = "Hands-on Python & R in Data Science. Learn ML algorithms.",
                            DifficultyLevel = "Intermediate",
                            Duration = 35,
                            Name = "Machine Learning A-Z",
                            Platform = "Udemy",
                            Skills = "machine learning, python, r, data science"
                        },
                        new
                        {
                            Id = 6,
                            CourseLink = "https://udemy.com/react-the-complete-guide",
                            Description = "Build powerful, fast, user-friendly web apps with React.",
                            DifficultyLevel = "Intermediate",
                            Duration = 28,
                            Name = "React - The Complete Guide",
                            Platform = "Udemy",
                            Skills = "react, javascript, frontend, web development"
                        },
                        new
                        {
                            Id = 7,
                            CourseLink = "https://coursera.org/sql-for-data-analysis",
                            Description = "Analyze data and build reports using SQL.",
                            DifficultyLevel = "Beginner",
                            Duration = 15,
                            Name = "SQL for Data Analysis",
                            Platform = "Coursera",
                            Skills = "sql, data analysis, databases"
                        },
                        new
                        {
                            Id = 8,
                            CourseLink = "https://edx.org/devops-fundamentals",
                            Description = "Learn the basics of DevOps, CI/CD, Docker, and Kubernetes.",
                            DifficultyLevel = "Beginner",
                            Duration = 18,
                            Name = "DevOps Fundamentals",
                            Platform = "edX",
                            Skills = "devops, ci/cd, docker, kubernetes"
                        },
                        new
                        {
                            Id = 9,
                            CourseLink = "https://udemy.com/cloud-computing-aws",
                            Description = "Master AWS cloud services and architecture.",
                            DifficultyLevel = "Advanced",
                            Duration = 32,
                            Name = "Cloud Computing with AWS",
                            Platform = "Udemy",
                            Skills = "aws, cloud computing, devops"
                        },
                        new
                        {
                            Id = 10,
                            CourseLink = "https://coursera.org/cybersecurity-essentials",
                            Description = "Understand the fundamentals of cybersecurity and network security.",
                            DifficultyLevel = "Beginner",
                            Duration = 22,
                            Name = "Cybersecurity Essentials",
                            Platform = "Coursera",
                            Skills = "cybersecurity, network security, information security"
                        },
                        new
                        {
                            Id = 11,
                            CourseLink = "https://edx.org/ai-intro",
                            Description = "Explore the basics of AI, neural networks, and intelligent systems.",
                            DifficultyLevel = "Beginner",
                            Duration = 24,
                            Name = "Introduction to Artificial Intelligence",
                            Platform = "edX",
                            Skills = "ai, artificial intelligence, neural networks"
                        },
                        new
                        {
                            Id = 12,
                            CourseLink = "https://udemy.com/ios-app-development-swift",
                            Description = "Build iOS apps from scratch using Swift and Xcode.",
                            DifficultyLevel = "Intermediate",
                            Duration = 27,
                            Name = "iOS App Development with Swift",
                            Platform = "Udemy",
                            Skills = "ios, swift, mobile development"
                        },
                        new
                        {
                            Id = 13,
                            CourseLink = "https://coursera.org/android-development-beginners",
                            Description = "Create Android apps using Java and Android Studio.",
                            DifficultyLevel = "Beginner",
                            Duration = 21,
                            Name = "Android Development for Beginners",
                            Platform = "Coursera",
                            Skills = "android, java, mobile development"
                        },
                        new
                        {
                            Id = 14,
                            CourseLink = "https://edx.org/business-analysis-fundamentals",
                            Description = "Learn the key concepts and tools for business analysis.",
                            DifficultyLevel = "Beginner",
                            Duration = 19,
                            Name = "Business Analysis Fundamentals",
                            Platform = "edX",
                            Skills = "business analysis, requirements, process modeling"
                        },
                        new
                        {
                            Id = 15,
                            CourseLink = "https://udemy.com/agile-project-management",
                            Description = "Master agile methodologies, Scrum, and Kanban for project management.",
                            DifficultyLevel = "Intermediate",
                            Duration = 26,
                            Name = "Agile Project Management",
                            Platform = "Udemy",
                            Skills = "agile, scrum, kanban, project management"
                        },
                        new
                        {
                            Id = 16,
                            CourseLink = "https://coursera.org/unity-game-development",
                            Description = "Create 2D and 3D games using Unity and C#.",
                            DifficultyLevel = "Intermediate",
                            Duration = 34,
                            Name = "Unity Game Development",
                            Platform = "Coursera",
                            Skills = "unity, c#, game development"
                        },
                        new
                        {
                            Id = 17,
                            CourseLink = "https://edx.org/tableau-data-visualization",
                            Description = "Visualize and analyze data using Tableau Desktop.",
                            DifficultyLevel = "Beginner",
                            Duration = 16,
                            Name = "Tableau for Data Visualization",
                            Platform = "edX",
                            Skills = "tableau, data visualization, business intelligence"
                        },
                        new
                        {
                            Id = 18,
                            CourseLink = "https://udemy.com/linux-administration-essentials",
                            Description = "Manage Linux systems, users, and permissions.",
                            DifficultyLevel = "Intermediate",
                            Duration = 23,
                            Name = "Linux Administration Essentials",
                            Platform = "Udemy",
                            Skills = "linux, system administration, bash"
                        },
                        new
                        {
                            Id = 19,
                            CourseLink = "https://coursera.org/digital-marketing-masterclass",
                            Description = "Learn SEO, SEM, social media, and email marketing.",
                            DifficultyLevel = "Beginner",
                            Duration = 20,
                            Name = "Digital Marketing Masterclass",
                            Platform = "Coursera",
                            Skills = "digital marketing, seo, sem, social media"
                        },
                        new
                        {
                            Id = 20,
                            CourseLink = "https://edx.org/blockchain-cryptocurrency-explained",
                            Description = "Understand blockchain technology and cryptocurrencies.",
                            DifficultyLevel = "Advanced",
                            Duration = 29,
                            Name = "Blockchain and Cryptocurrency Explained",
                            Platform = "edX",
                            Skills = "blockchain, cryptocurrency, distributed ledger"
                        },
                        new
                        {
                            Id = 21,
                            CourseLink = "https://udemy.com/docker-mastery",
                            Description = "Master Docker for DevOps and development.",
                            DifficultyLevel = "Intermediate",
                            Duration = 19,
                            Name = "Docker Mastery",
                            Platform = "Udemy",
                            Skills = "docker, devops, containers"
                        },
                        new
                        {
                            Id = 22,
                            CourseLink = "https://coursera.org/kubernetes-for-developers",
                            Description = "Learn Kubernetes from scratch for developers.",
                            DifficultyLevel = "Advanced",
                            Duration = 24,
                            Name = "Kubernetes for Developers",
                            Platform = "Coursera",
                            Skills = "kubernetes, devops, containers"
                        },
                        new
                        {
                            Id = 23,
                            CourseLink = "https://edx.org/power-bi-essentials",
                            Description = "Analyze and visualize data with Power BI.",
                            DifficultyLevel = "Beginner",
                            Duration = 18,
                            Name = "Power BI Essentials",
                            Platform = "edX",
                            Skills = "power bi, data visualization, business intelligence"
                        },
                        new
                        {
                            Id = 24,
                            CourseLink = "https://udemy.com/spring-boot-in-action",
                            Description = "Build REST APIs with Spring Boot.",
                            DifficultyLevel = "Intermediate",
                            Duration = 22,
                            Name = "Spring Boot in Action",
                            Platform = "Udemy",
                            Skills = "spring boot, java, rest api"
                        },
                        new
                        {
                            Id = 25,
                            CourseLink = "https://coursera.org/csharp-fundamentals",
                            Description = "Learn the basics of C# programming.",
                            DifficultyLevel = "Beginner",
                            Duration = 17,
                            Name = "C# Fundamentals",
                            Platform = "Coursera",
                            Skills = "c#, programming, .net"
                        },
                        new
                        {
                            Id = 26,
                            CourseLink = "https://edx.org/aspnet-core-web-development",
                            Description = "Develop web apps with ASP.NET Core.",
                            DifficultyLevel = "Intermediate",
                            Duration = 27,
                            Name = "ASP.NET Core Web Development",
                            Platform = "edX",
                            Skills = "asp.net core, c#, web development"
                        },
                        new
                        {
                            Id = 27,
                            CourseLink = "https://udemy.com/photoshop-for-beginners",
                            Description = "Learn Photoshop from scratch.",
                            DifficultyLevel = "Beginner",
                            Duration = 14,
                            Name = "Photoshop for Beginners",
                            Platform = "Udemy",
                            Skills = "photoshop, design, graphics"
                        },
                        new
                        {
                            Id = 28,
                            CourseLink = "https://coursera.org/illustrator-masterclass",
                            Description = "Master Adobe Illustrator for design.",
                            DifficultyLevel = "Intermediate",
                            Duration = 20,
                            Name = "Illustrator Masterclass",
                            Platform = "Coursera",
                            Skills = "illustrator, design, graphics"
                        },
                        new
                        {
                            Id = 29,
                            CourseLink = "https://edx.org/excel-data-analysis",
                            Description = "Analyze data using Microsoft Excel.",
                            DifficultyLevel = "Beginner",
                            Duration = 13,
                            Name = "Excel Data Analysis",
                            Platform = "edX",
                            Skills = "excel, data analysis, spreadsheets"
                        },
                        new
                        {
                            Id = 30,
                            CourseLink = "https://udemy.com/financial-markets",
                            Description = "Understand the basics of financial markets.",
                            DifficultyLevel = "Beginner",
                            Duration = 21,
                            Name = "Financial Markets",
                            Platform = "Udemy",
                            Skills = "finance, markets, investing"
                        },
                        new
                        {
                            Id = 31,
                            CourseLink = "https://coursera.org/ethical-hacking",
                            Description = "Learn ethical hacking and penetration testing.",
                            DifficultyLevel = "Advanced",
                            Duration = 28,
                            Name = "Ethical Hacking",
                            Platform = "Coursera",
                            Skills = "ethical hacking, cybersecurity, penetration testing"
                        },
                        new
                        {
                            Id = 32,
                            CourseLink = "https://edx.org/big-data-analytics",
                            Description = "Analyze big data with Hadoop and Spark.",
                            DifficultyLevel = "Advanced",
                            Duration = 33,
                            Name = "Big Data Analytics",
                            Platform = "edX",
                            Skills = "big data, hadoop, spark"
                        },
                        new
                        {
                            Id = 33,
                            CourseLink = "https://udemy.com/mobile-app-marketing",
                            Description = "Market your mobile apps effectively.",
                            DifficultyLevel = "Beginner",
                            Duration = 12,
                            Name = "Mobile App Marketing",
                            Platform = "Udemy",
                            Skills = "mobile marketing, app store, advertising"
                        },
                        new
                        {
                            Id = 34,
                            CourseLink = "https://coursera.org/nodejs-api-development",
                            Description = "Build RESTful APIs with Node.js.",
                            DifficultyLevel = "Intermediate",
                            Duration = 23,
                            Name = "Node.js API Development",
                            Platform = "Coursera",
                            Skills = "node.js, api, backend"
                        },
                        new
                        {
                            Id = 35,
                            CourseLink = "https://edx.org/vuejs-crash-course",
                            Description = "Get started with Vue.js for frontend development.",
                            DifficultyLevel = "Beginner",
                            Duration = 16,
                            Name = "Vue.js Crash Course",
                            Platform = "edX",
                            Skills = "vue.js, javascript, frontend"
                        },
                        new
                        {
                            Id = 36,
                            CourseLink = "https://udemy.com/python-for-data-engineering",
                            Description = "Use Python for ETL and data pipelines.",
                            DifficultyLevel = "Intermediate",
                            Duration = 29,
                            Name = "Python for Data Engineering",
                            Platform = "Udemy",
                            Skills = "python, data engineering, etl"
                        },
                        new
                        {
                            Id = 37,
                            CourseLink = "https://coursera.org/gcp-essentials",
                            Description = "Learn the basics of GCP.",
                            DifficultyLevel = "Beginner",
                            Duration = 18,
                            Name = "Google Cloud Platform Essentials",
                            Platform = "Coursera",
                            Skills = "gcp, cloud, devops"
                        },
                        new
                        {
                            Id = 38,
                            CourseLink = "https://edx.org/sas-programming",
                            Description = "Learn SAS for data analysis.",
                            DifficultyLevel = "Intermediate",
                            Duration = 22,
                            Name = "SAS Programming",
                            Platform = "edX",
                            Skills = "sas, data analysis, statistics"
                        },
                        new
                        {
                            Id = 39,
                            CourseLink = "https://udemy.com/r-for-data-science",
                            Description = "Analyze data and build models with R.",
                            DifficultyLevel = "Intermediate",
                            Duration = 24,
                            Name = "R for Data Science",
                            Platform = "Udemy",
                            Skills = "r, data science, statistics"
                        },
                        new
                        {
                            Id = 40,
                            CourseLink = "https://coursera.org/penetration-testing-kali-linux",
                            Description = "Master penetration testing using Kali Linux.",
                            DifficultyLevel = "Advanced",
                            Duration = 27,
                            Name = "Penetration Testing with Kali Linux",
                            Platform = "Coursera",
                            Skills = "penetration testing, kali linux, cybersecurity"
                        },
                        new
                        {
                            Id = 41,
                            CourseLink = "https://edx.org/azure-fundamentals",
                            Description = "Get started with Microsoft Azure cloud.",
                            DifficultyLevel = "Beginner",
                            Duration = 20,
                            Name = "Microsoft Azure Fundamentals",
                            Platform = "edX",
                            Skills = "azure, cloud, devops"
                        },
                        new
                        {
                            Id = 42,
                            CourseLink = "https://udemy.com/jenkins-for-cicd",
                            Description = "Automate builds and deployments with Jenkins.",
                            DifficultyLevel = "Intermediate",
                            Duration = 17,
                            Name = "Jenkins for CI/CD",
                            Platform = "Udemy",
                            Skills = "jenkins, ci/cd, devops"
                        },
                        new
                        {
                            Id = 43,
                            CourseLink = "https://coursera.org/git-github-essentials",
                            Description = "Learn version control with Git and GitHub.",
                            DifficultyLevel = "Beginner",
                            Duration = 13,
                            Name = "Git & GitHub Essentials",
                            Platform = "Coursera",
                            Skills = "git, github, version control"
                        },
                        new
                        {
                            Id = 44,
                            CourseLink = "https://edx.org/scrum-master-certification-prep",
                            Description = "Prepare for Scrum Master certification.",
                            DifficultyLevel = "Intermediate",
                            Duration = 21,
                            Name = "Scrum Master Certification Prep",
                            Platform = "edX",
                            Skills = "scrum, agile, project management"
                        },
                        new
                        {
                            Id = 45,
                            CourseLink = "https://udemy.com/python-for-finance",
                            Description = "Use Python for financial analysis and trading.",
                            DifficultyLevel = "Intermediate",
                            Duration = 26,
                            Name = "Python for Finance",
                            Platform = "Udemy",
                            Skills = "python, finance, trading"
                        },
                        new
                        {
                            Id = 46,
                            CourseLink = "https://coursera.org/nosql-databases",
                            Description = "Learn about MongoDB, Cassandra, and NoSQL databases.",
                            DifficultyLevel = "Intermediate",
                            Duration = 19,
                            Name = "NoSQL Databases",
                            Platform = "Coursera",
                            Skills = "nosql, mongodb, cassandra, databases"
                        },
                        new
                        {
                            Id = 47,
                            CourseLink = "https://edx.org/photoshop-advanced-techniques",
                            Description = "Master advanced Photoshop techniques.",
                            DifficultyLevel = "Advanced",
                            Duration = 25,
                            Name = "Photoshop Advanced Techniques",
                            Platform = "edX",
                            Skills = "photoshop, design, graphics"
                        },
                        new
                        {
                            Id = 48,
                            CourseLink = "https://udemy.com/business-intelligence-qlikview",
                            Description = "Analyze data with QlikView.",
                            DifficultyLevel = "Intermediate",
                            Duration = 18,
                            Name = "Business Intelligence with QlikView",
                            Platform = "Udemy",
                            Skills = "qlikview, business intelligence, data analysis"
                        },
                        new
                        {
                            Id = 49,
                            CourseLink = "https://coursera.org/swift-for-beginners",
                            Description = "Learn Swift programming for iOS development.",
                            DifficultyLevel = "Beginner",
                            Duration = 14,
                            Name = "Swift for Beginners",
                            Platform = "Coursera",
                            Skills = "swift, ios, programming"
                        },
                        new
                        {
                            Id = 50,
                            CourseLink = "https://edx.org/tensorflow-deep-learning",
                            Description = "Build deep learning models with TensorFlow.",
                            DifficultyLevel = "Advanced",
                            Duration = 31,
                            Name = "TensorFlow for Deep Learning",
                            Platform = "edX",
                            Skills = "tensorflow, deep learning, ai"
                        });
                });

            modelBuilder.Entity("Entities.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Entities.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("Entities.Models.InternshipPosition", b =>
                {
                    b.Property<int>("InternshipId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfOpenings")
                        .HasColumnType("int");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InternshipId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("InternshipPosition");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Entities.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Entities.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Entities.Models.SavedPost", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("StudentId", "PostId", "Type");

                    b.ToTable("SavedPosts");
                });

            modelBuilder.Entity("Entities.Models.Scholarship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("EligibleGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Funded")
                        .HasColumnType("int");

                    b.Property<string>("Grants")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UniversityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UrlApplicationForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Scholarships");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlResume")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Entities.Models.University", b =>
                {
                    b.Property<string>("UniversityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("UniversityUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationNotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniversityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            Bio = "System Administrator - Recommendy Platform",
                            ConcurrencyStamp = "64d84hg4-863b-44ce-9cac-75ec544afg45",
                            CreatedAt = new DateTime(2025, 6, 8, 12, 2, 36, 0, DateTimeKind.Utc),
                            Discriminator = "Admin",
                            Email = "admin@recommendy.com",
                            EmailConfirmed = true,
                            FirstName = "Recommendy",
                            IsBanned = false,
                            LastName = "Team",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@RECOMMENDY.COM",
                            NormalizedUserName = "RECOMMENDYADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDM9/B+XJ8SOWPryYUDPkzl8bo9tfM52qvgEEmmyswS4PN0oyi3vr2Qn+WhBXC3/Mg==",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "54GFNHD4564HNFG34FG",
                            TwoFactorEnabled = false,
                            UserName = "RecommendyAdmin"
                        });
                });

            modelBuilder.Entity("Entities.Models.UserCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userCodes");
                });

            modelBuilder.Entity("Entities.Models.UserInterest", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InterestId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("UserInterests");
                });

            modelBuilder.Entity("Internship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Approach")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<string>("UrlApplicationForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlPicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Internships");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "711ed7a1-df38-4447-bd87-dd0acbcf5735"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Admin", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Entities.Models.Admin", "AdminId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.ChatMessage", b =>
                {
                    b.HasOne("Entities.Models.ChatUsers", "chatUsers")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chatUsers");
                });

            modelBuilder.Entity("Entities.Models.ChatUsers", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("ChatMemberships")
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithOne("Company")
                        .HasForeignKey("Entities.Models.Company", "CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Feedback", b =>
                {
                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Models.InternshipPosition", b =>
                {
                    b.HasOne("Internship", "Internship")
                        .WithMany("InternshipPositions")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Internship");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Notification")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Report", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.SavedPost", b =>
                {
                    b.HasOne("Entities.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Scholarship", b =>
                {
                    b.HasOne("Entities.Models.University", "University")
                        .WithMany("Scholarships")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("Entities.Models.Student", "StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.University", b =>
                {
                    b.HasOne("Entities.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Entities.Models.User", "User")
                        .WithOne("University")
                        .HasForeignKey("Entities.Models.University", "UniversityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserCode", b =>
                {
                    b.HasOne("Entities.Models.User", "user")
                        .WithMany("userCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Entities.Models.UserInterest", b =>
                {
                    b.HasOne("Entities.Models.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Internship", b =>
                {
                    b.HasOne("Entities.Models.Company", "Company")
                        .WithMany("Internships")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.ChatUsers", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Navigation("Internships");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Entities.Models.University", b =>
                {
                    b.Navigation("Scholarships");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("ChatMemberships");

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("University")
                        .IsRequired();

                    b.Navigation("userCodes");
                });

            modelBuilder.Entity("Internship", b =>
                {
                    b.Navigation("InternshipPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
